// "proxy": "node server/proxy.js"

// const express = require('express');
// const axios = require('axios');

// const app = express();
// const PORT = 3000;

// // Enable CORS (you can install the 'cors' package for more options)
// app.use((req, res, next) => {
//     res.header('Access-Control-Allow-Origin', '*');
//     res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE');
//     res.header('Access-Control-Allow-Headers', 'Content-Type');
//     next();
// });

// // Proxy all requests
// app.use('/proxy', async (req, res) => {
//     try {
//         // Extract the URL to proxy from the request query
//         const targetUrl = req.query.url;

//         // Make a request to the target URL
//         const response = await axios.get(targetUrl);

//         // Send the response from the target URL to the client
//         res.send(response.data);
//     } catch (error) {
//         console.error(error);
//         res.status(500).send('Internal Server Error');
//     }
// });

// app.listen(PORT, () => {
//     console.log(`Proxy server is running on http://localhost:${PORT}`);
// });


// function sjhlfs() {
//     const proxyUrl = 'http://localhost:3000/proxy?url=https://www.gutenberg.org/cache/epub/84/pg84.txt';
  
//     fetch(proxyUrl)
//       .then(response => response.text())
//       .then(data => {
//         console.log(data);
//       })
//       .catch(error => {
//         console.error(error);
//       });
//   }

// "axios": "^1.6.7"

// "express": "^4.18.2",

      // // ATTEMPT TO SAVE SINGLE BOOK TO DATABASE -- if successful, author will need to be in a for loop for potential multiple authors
        // // currently gonna test saving one book in db, commenting out loop, hardcoding in bookid
        // // each book is put into variable so we dont have to repeat same line of code for each property we access

        // const bookData = response.data.results[0];

        // const bookId = bookData.id;
        // const title = bookData.title;
        // const authors = bookData.authors[0].name;
        // // image comes in form of url; problem is if that image no longer exists in gutdendex, we have no image. may want to fetch image? i tried it though, and when i console logged, it was funky looking. maybe its binary stuff? idk what i was looking at. - Ryan
        // const image = bookData.formats['image/jpeg'];
        // // actual book text, bookId is inserted into url structure
        // const textUrl = `https://www.gutenberg.org/ebooks/${bookId}.txt.utf-8`


        // // fetch and logs actual book text 
        // // [because the response is too long for temrinal, comment this .get() block of code to see the other logged data in terminal]
        // //COMMENT BACK IN TO SEE THE BOOK TEXT

        // const text = axios.get(textUrl)
        //   .then(response => {
        //     console.log(response.data)
        //   })

        // console.log(bookId, title, authors, image, text);

        // const newBook = new Book({
        //   bookId: bookId,
        //   title: title,
        //   authors: authors,
        //   image: image,
        //   text: text,
        // });

        // await newBook.save();
        // // console.log('Book saved to db', newBook)



        //=================================
        // COMMENT BELOW CATCH BACK IN WHEN USING TRY CATCH BLOCK
    // } catch (error) {
    //   console.error(`Error fetching and saving data from page ${page}:`, error);
    // }