TODO: 

- limit ratings to one? (so user cannot overinflate ratings)

-fix the siving of the rating stars on the home page when viewing on mobile

=============================================

NOTES (can leave notes here detailing what you did):

    General notes: 
    
     -MAKE YOUR OWN .ENV SECRET
        (in .env file:
        SECRET=rvh8uvnufvhe8rvr
        )
        but make your own random string of letters and numbers


        To make an admin, change default to admin in User model (then change it back to user one you made one)

        Made it so you cannot make duplicate users anymore (unique email and username); to see this work, you must drop your old users collection in db first.

        color scheme: 
            offwhite: #f3f3ec
            forest green: #8abbb1
            black: #000000 or 'black'

        always git pull origin main when you get on and before you code to avoid git conflicts as much as possible

    

        front end: when making queries and mutations, dont just select all fields. Pay attention to what information you will be returning, because some are unnecessary.
        For example, when making the CREATE_USER mutation, i didn't select keptBooks, because they won't have any, so we don't need to retrieve or return that field for this mutation.


    ===================================================

    from Ryan: 
        2/10: styled ratings and fixed logic for ratings in home, made typedef and mutation for admin to delete user, made it so you cannot create dupe users
    

    from Peyton : 


    from Sal :



=============================================
EXTRA CODE:


if (context.user) {
                try {
                    const user = await User.findById(context.user._id);

                    const newComment = {
                        userId: user._id,
                        comments,
                    };

                    const newReview = new Review({
                        // _id
                        userId: user._id,
                        comments: [newComment],
                        rating: rating,
                    });

                    // saves document into database (conmpass)
                    await newReview.save();

                    // Find the book by its _id and update it with the new review's _id
                    const updatedBook = await Book.findById(bookId);
                    updatedBook.reviews.push(newReview._id); // Push the review's _id
                    await updatedBook.save();

                    // Assuming you need to return the added review, fetch it back along with necessary book details
                    // Since reviews are now referenced by ID, fetch the detailed review directly if needed
                    const addedReview = await Review.findById(newReview._id);

                    if (!addedReview) {
                        console.error('Review not found after update');
                        throw new Error('Review not found after update');
                    }

                    // Structure the response as needed, including the bookId
                    const responseData = {
                        _id: addedReview._id,
                        title: updatedBook.title,
                        bookId: bookId, // Ensuring the bookId is included in the response
                        authors: updatedBook.authors,
                        image: updatedBook.image,
                        text: updatedBook.text,
                        reviews: [
                            {
                                _id: addedReview._id,
                                comments: addedReview.comments.map(comment => ({
                                    _id: comment._id,
                                    userId: comment.userId,
                                    comments: comment.comments,
                                })),
                                rating: addedReview.rating, // Include the rating here
                            }
                        ],
                    };

                    return responseData;




                    
                    This is a sentence. 
                    \n