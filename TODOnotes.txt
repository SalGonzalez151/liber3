TODO: 

- KEEP BOOK: allow user to save book to their MyBookshelf

- MAKE MYLIBRARY: this is user profile, so when they are logged in, they can go to that page to see:
    their MyBookshelf (saved books), and perhaps all their ratings and comments? Add reviews and comment to user model
    
- BUILD UP SEARCH FEATURE LOGIC: so when user types in search bar, they can search a book by title or author

- MAKE A RATING: have a user be able to rate a book

- COMMENT: have a user be able to comment on a book

- LOGOUT: should be hidden if user is not logged in

- CREATE A USER THAT IS AN ADMIN: figure out how to create a user that is an admin instead of user, from there, probably need to build functionality exclusive to admins only (probably by queries and mutations)

- NAV MENU - change background color of dropdown menu to a slightly lighter than dark purple we have for color scheme; make the nav menu button's background color also slightly lighter than the dark purple we have been using

=============================================

NOTES (can leave notes here detailing what you did):

    General notes: 

        color scheme: 
            offwhite: #f3f3ec
            forest green: #8abbb1
            black: #000000 or 'black'

        always git pull origin main when you get on and before you code to avoid git conflicts as much as possible

        MyLibrary: is user's profile; MyBookshelf: will be saved books

        front end: when making queries and mutations, dont just select all fields. Pay attention to what information you will be returning, because some are unnecessary.
        For example, when making the CREATE_USER mutation, i didn't select keptBooks, because they won't have any, so we don't need to retrieve or return that field for this mutation.


    ===================================================

    from Ryan: 
        2/7: worked out the typeDefs and resolver and front end query for searching, will work on front end later
    

    from Peyton : working on 3d > for text styling, console log the book title in gutendex at a proper point (better to console log one specific book),
    see if it had stodinyle cg in the text  (like \n), if it does, check graphql and retrieve that same book's text.
    If it does not have style coding in it, at some point in the back end, text is losing its styling. Goal is to prevent text from losing that.


    from Sal :



=============================================
EXTRA CODE:


if (context.user) {
                try {
                    const user = await User.findById(context.user._id);

                    const newComment = {
                        userId: user._id,
                        comments,
                    };

                    const newReview = new Review({
                        // _id
                        userId: user._id,
                        comments: [newComment],
                        rating: rating,
                    });

                    // saves document into database (conmpass)
                    await newReview.save();

                    // Find the book by its _id and update it with the new review's _id
                    const updatedBook = await Book.findById(bookId);
                    updatedBook.reviews.push(newReview._id); // Push the review's _id
                    await updatedBook.save();

                    // Assuming you need to return the added review, fetch it back along with necessary book details
                    // Since reviews are now referenced by ID, fetch the detailed review directly if needed
                    const addedReview = await Review.findById(newReview._id);

                    if (!addedReview) {
                        console.error('Review not found after update');
                        throw new Error('Review not found after update');
                    }

                    // Structure the response as needed, including the bookId
                    const responseData = {
                        _id: addedReview._id,
                        title: updatedBook.title,
                        bookId: bookId, // Ensuring the bookId is included in the response
                        authors: updatedBook.authors,
                        image: updatedBook.image,
                        text: updatedBook.text,
                        reviews: [
                            {
                                _id: addedReview._id,
                                comments: addedReview.comments.map(comment => ({
                                    _id: comment._id,
                                    userId: comment.userId,
                                    comments: comment.comments,
                                })),
                                rating: addedReview.rating, // Include the rating here
                            }
                        ],
                    };

                    return responseData;